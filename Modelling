{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tiheli/digit-recognizer-project-with-cnn?scriptVersionId=250634389\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"c032ab64","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-07-15T14:07:30.83858Z","iopub.status.busy":"2025-07-15T14:07:30.838267Z","iopub.status.idle":"2025-07-15T14:07:32.680725Z","shell.execute_reply":"2025-07-15T14:07:32.679768Z"},"papermill":{"duration":1.848513,"end_time":"2025-07-15T14:07:32.682164","exception":false,"start_time":"2025-07-15T14:07:30.833651","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/digit-recognizer/sample_submission.csv\n","/kaggle/input/digit-recognizer/train.csv\n","/kaggle/input/digit-recognizer/test.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"markdown","id":"c4d1e7de","metadata":{"papermill":{"duration":0.002516,"end_time":"2025-07-15T14:07:32.687928","exception":false,"start_time":"2025-07-15T14:07:32.685412","status":"completed"},"tags":[]},"source":["# [1] Import Libraries and Load Data\n"]},{"cell_type":"code","execution_count":2,"id":"5622beaa","metadata":{"execution":{"iopub.execute_input":"2025-07-15T14:07:32.694954Z","iopub.status.busy":"2025-07-15T14:07:32.69419Z","iopub.status.idle":"2025-07-15T14:07:55.771248Z","shell.execute_reply":"2025-07-15T14:07:55.770397Z"},"papermill":{"duration":23.082187,"end_time":"2025-07-15T14:07:55.77272","exception":false,"start_time":"2025-07-15T14:07:32.690533","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2025-07-15 14:07:36.387585: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","E0000 00:00:1752588456.633436      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","E0000 00:00:1752588456.713717      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]},{"name":"stdout","output_type":"stream","text":["Libraries imported successfully.\n","Training and testing data loaded successfully.\n","\n","Shape of the training data: (42000, 785)\n","Shape of the testing data: (28000, 784)\n","\n","First 5 rows of the training data:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>label</th>\n","      <th>pixel0</th>\n","      <th>pixel1</th>\n","      <th>pixel2</th>\n","      <th>pixel3</th>\n","      <th>pixel4</th>\n","      <th>pixel5</th>\n","      <th>pixel6</th>\n","      <th>pixel7</th>\n","      <th>pixel8</th>\n","      <th>...</th>\n","      <th>pixel774</th>\n","      <th>pixel775</th>\n","      <th>pixel776</th>\n","      <th>pixel777</th>\n","      <th>pixel778</th>\n","      <th>pixel779</th>\n","      <th>pixel780</th>\n","      <th>pixel781</th>\n","      <th>pixel782</th>\n","      <th>pixel783</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 785 columns</p>\n","</div>"],"text/plain":["   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n","0      1       0       0       0       0       0       0       0       0   \n","1      0       0       0       0       0       0       0       0       0   \n","2      1       0       0       0       0       0       0       0       0   \n","3      4       0       0       0       0       0       0       0       0   \n","4      0       0       0       0       0       0       0       0       0   \n","\n","   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n","0       0  ...         0         0         0         0         0         0   \n","1       0  ...         0         0         0         0         0         0   \n","2       0  ...         0         0         0         0         0         0   \n","3       0  ...         0         0         0         0         0         0   \n","4       0  ...         0         0         0         0         0         0   \n","\n","   pixel780  pixel781  pixel782  pixel783  \n","0         0         0         0         0  \n","1         0         0         0         0  \n","2         0         0         0         0  \n","3         0         0         0         0  \n","4         0         0         0         0  \n","\n","[5 rows x 785 columns]"]},"metadata":{},"output_type":"display_data"}],"source":["# Import foundational libraries\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Import TensorFlow and Keras for building our neural network\n","# TensorFlow is the backend, and Keras is the user-friendly API to build models.\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPool2D\n","from tensorflow.keras.utils import to_categorical\n","\n","print(\"Libraries imported successfully.\")\n","\n","# Load the training and testing datasets\n","# This assumes the data is in the standard Kaggle input directory.\n","try:\n","    train_df = pd.read_csv('/kaggle/input/digit-recognizer/train.csv')\n","    test_df = pd.read_csv('/kaggle/input/digit-recognizer/test.csv')\n","    print(\"Training and testing data loaded successfully.\")\n","except FileNotFoundError:\n","    print(\"Error: Data files not found. Ensure you are running this in a Kaggle environment.\")\n","    print(\"Creating dummy dataframes to allow the script to continue without crashing.\")\n","    train_df = pd.DataFrame()\n","    test_df = pd.DataFrame()\n","\n","# Inspect the loaded data\n","if not train_df.empty:\n","    print(\"\\nShape of the training data:\", train_df.shape)\n","    print(\"Shape of the testing data:\", test_df.shape)\n","    print(\"\\nFirst 5 rows of the training data:\")\n","    display(train_df.head())"]},{"cell_type":"markdown","id":"ee38eb6f","metadata":{"papermill":{"duration":0.003063,"end_time":"2025-07-15T14:07:55.779563","exception":false,"start_time":"2025-07-15T14:07:55.7765","status":"completed"},"tags":[]},"source":["# [2] Prepare the Data for the CNN Model\n"]},{"cell_type":"code","execution_count":3,"id":"a2168933","metadata":{"execution":{"iopub.execute_input":"2025-07-15T14:07:55.787133Z","iopub.status.busy":"2025-07-15T14:07:55.786811Z","iopub.status.idle":"2025-07-15T14:07:56.588943Z","shell.execute_reply":"2025-07-15T14:07:56.588051Z"},"papermill":{"duration":0.807807,"end_time":"2025-07-15T14:07:56.590522","exception":false,"start_time":"2025-07-15T14:07:55.782715","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Normalization complete.\n","Data reshaped. X_train shape: (42000, 28, 28, 1), X_test shape: (28000, 28, 28, 1)\n","Labels have been one-hot encoded. y_train shape: (42000, 10)\n","\n","Displaying a few sample digits after processing:\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1000x400 with 5 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Separate the labels (y) from the pixel data (X) in the training set\n","y_train = train_df[\"label\"]\n","X_train = train_df.drop(labels = [\"label\"], axis = 1) \n","\n","# The test set has no labels, so it's entirely features (X)\n","X_test = test_df\n","\n","# 1. Normalization\n","# We normalize the data to a 0-1 range to help the neural network converge faster.\n","# We divide by 255.0 (using a float) to ensure the result is a float.\n","X_train = X_train / 255.0\n","X_test = X_test / 255.0\n","print(\"Normalization complete.\")\n","\n","# 2. Reshape\n","# CNNs expect image data in the format (batch_size, height, width, color_channels).\n","# Our images are 28x28 pixels and grayscale (1 channel).\n","X_train = X_train.values.reshape(-1, 28, 28, 1)\n","X_test = X_test.values.reshape(-1, 28, 28, 1)\n","print(f\"Data reshaped. X_train shape: {X_train.shape}, X_test shape: {X_test.shape}\")\n","\n","# 3. One-Hot Encoding for Labels\n","# We convert the labels (e.g., 5) into a vector of 10 positions with a 1 at the 5th index ([0,0,0,0,0,1,0,0,0,0]).\n","# This is necessary for the 'categorical_crossentropy' loss function.\n","y_train = to_categorical(y_train, num_classes = 10)\n","print(f\"Labels have been one-hot encoded. y_train shape: {y_train.shape}\")\n","\n","# (Optional but recommended) Visualize some of the processed digits\n","print(\"\\nDisplaying a few sample digits after processing:\")\n","plt.figure(figsize=(10, 4))\n","for i in range(5):\n","    plt.subplot(1, 5, i + 1)\n","    # The [:,:,0] is used to remove the last dimension (channel) for plotting\n","    plt.imshow(X_train[i][:,:,0], cmap='gray')\n","    # np.argmax converts the one-hot encoded vector back to a number for the title\n","    plt.title(f\"Label: {np.argmax(y_train[i])}\")\n","    plt.axis('off')\n","plt.show()"]},{"cell_type":"markdown","id":"f2491146","metadata":{"papermill":{"duration":0.003053,"end_time":"2025-07-15T14:07:56.596945","exception":false,"start_time":"2025-07-15T14:07:56.593892","status":"completed"},"tags":[]},"source":["# [3] Define and Compile the CNN Model\n"]},{"cell_type":"code","execution_count":4,"id":"0712296e","metadata":{"execution":{"iopub.execute_input":"2025-07-15T14:07:56.604654Z","iopub.status.busy":"2025-07-15T14:07:56.604339Z","iopub.status.idle":"2025-07-15T14:07:56.801662Z","shell.execute_reply":"2025-07-15T14:07:56.800766Z"},"papermill":{"duration":0.202903,"end_time":"2025-07-15T14:07:56.803009","exception":false,"start_time":"2025-07-15T14:07:56.600106","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Model architecture built successfully.\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","2025-07-15 14:07:56.616810: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"]},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"],"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">832</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">25,632</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3136</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">803,072</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">2,570</span> │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n","</pre>\n"],"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n","│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m832\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │        \u001b[38;5;34m25,632\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m36,928\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3136\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │       \u001b[38;5;34m803,072\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m256\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n","├─────────────────────────────────┼────────────────────────┼───────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m2,570\u001b[0m │\n","└─────────────────────────────────┴────────────────────────┴───────────────┘\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">887,530</span> (3.39 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m887,530\u001b[0m (3.39 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">887,530</span> (3.39 MB)\n","</pre>\n"],"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m887,530\u001b[0m (3.39 MB)\n"]},"metadata":{},"output_type":"display_data"},{"data":{"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"],"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"]},"metadata":{},"output_type":"display_data"}],"source":["# Create a Sequential model, which is a linear stack of layers.\n","model = Sequential()\n","\n","# --- Convolutional Block 1 ---\n","# 32 filters, each 5x5 in size. 'relu' is the activation function.\n","# 'padding=\"Same\"' ensures the output image size is the same as the input.\n","# 'input_shape' is only needed for the first layer.\n","model.add(Conv2D(filters=32, kernel_size=(5,5), padding='Same', activation='relu', input_shape=(28,28,1)))\n","model.add(Conv2D(filters=32, kernel_size=(5,5), padding='Same', activation='relu'))\n","model.add(MaxPool2D(pool_size=(2,2)))\n","model.add(Dropout(0.25)) # Dropout 25% of neurons\n","\n","# --- Convolutional Block 2 ---\n","# We increase the number of filters to learn more complex features.\n","model.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\n","model.add(Conv2D(filters=64, kernel_size=(3,3), padding='Same', activation='relu'))\n","model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n","model.add(Dropout(0.25)) # Dropout another 25%\n","\n","# --- Fully Connected Block ---\n","# Flatten the 2D arrays into a 1D vector before feeding to the Dense layers.\n","model.add(Flatten())\n","# A standard dense layer with 256 neurons.\n","model.add(Dense(256, activation=\"relu\"))\n","model.add(Dropout(0.5)) # A higher dropout rate for the dense layer\n","# The final output layer. It has 10 neurons (one for each digit 0-9).\n","# 'softmax' activation gives us the probability for each class.\n","model.add(Dense(10, activation=\"softmax\"))\n","\n","# Compile the model\n","# This step configures the model for training.\n","# Optimizer: 'adam' is a very effective and commonly used optimizer.\n","# Loss Function: 'categorical_crossentropy' is the standard for multi-class classification.\n","# Metrics: We want to monitor the 'accuracy' during training.\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","\n","# Print a summary of the model's architecture\n","print(\"Model architecture built successfully.\")\n","model.summary()"]},{"cell_type":"markdown","id":"65b23fcf","metadata":{"papermill":{"duration":0.003591,"end_time":"2025-07-15T14:07:56.810649","exception":false,"start_time":"2025-07-15T14:07:56.807058","status":"completed"},"tags":[]},"source":["# [4] Split Data, Augment, and Train the Model\n"]},{"cell_type":"code","execution_count":5,"id":"bd049a2e","metadata":{"execution":{"iopub.execute_input":"2025-07-15T14:07:56.819199Z","iopub.status.busy":"2025-07-15T14:07:56.818879Z","iopub.status.idle":"2025-07-15T14:46:09.104851Z","shell.execute_reply":"2025-07-15T14:46:09.103933Z"},"papermill":{"duration":2292.292166,"end_time":"2025-07-15T14:46:09.106408","exception":false,"start_time":"2025-07-15T14:07:56.814242","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Data split into training and validation sets.\n","Data augmentation generator is ready.\n","Epoch 1/20\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"name":"stdout","output_type":"stream","text":["591/591 - 113s - 191ms/step - accuracy: 0.8718 - loss: 0.3962 - val_accuracy: 0.9805 - val_loss: 0.0675\n","Epoch 2/20\n","591/591 - 110s - 187ms/step - accuracy: 0.9602 - loss: 0.1336 - val_accuracy: 0.9890 - val_loss: 0.0376\n","Epoch 3/20\n","591/591 - 111s - 188ms/step - accuracy: 0.9712 - loss: 0.0982 - val_accuracy: 0.9874 - val_loss: 0.0374\n","Epoch 4/20\n","591/591 - 110s - 186ms/step - accuracy: 0.9751 - loss: 0.0814 - val_accuracy: 0.9898 - val_loss: 0.0396\n","Epoch 5/20\n","591/591 - 109s - 184ms/step - accuracy: 0.9788 - loss: 0.0736 - val_accuracy: 0.9917 - val_loss: 0.0260\n","Epoch 6/20\n","591/591 - 109s - 185ms/step - accuracy: 0.9806 - loss: 0.0647 - val_accuracy: 0.9919 - val_loss: 0.0265\n","Epoch 7/20\n","591/591 - 112s - 189ms/step - accuracy: 0.9826 - loss: 0.0595 - val_accuracy: 0.9912 - val_loss: 0.0266\n","Epoch 8/20\n","591/591 - 112s - 189ms/step - accuracy: 0.9828 - loss: 0.0574 - val_accuracy: 0.9926 - val_loss: 0.0248\n","Epoch 9/20\n","591/591 - 109s - 185ms/step - accuracy: 0.9847 - loss: 0.0523 - val_accuracy: 0.9898 - val_loss: 0.0298\n","Epoch 10/20\n","591/591 - 110s - 186ms/step - accuracy: 0.9846 - loss: 0.0528 - val_accuracy: 0.9931 - val_loss: 0.0239\n","Epoch 11/20\n","591/591 - 144s - 243ms/step - accuracy: 0.9855 - loss: 0.0488 - val_accuracy: 0.9926 - val_loss: 0.0223\n","Epoch 12/20\n","591/591 - 140s - 237ms/step - accuracy: 0.9857 - loss: 0.0464 - val_accuracy: 0.9924 - val_loss: 0.0256\n","Epoch 13/20\n","591/591 - 113s - 190ms/step - accuracy: 0.9877 - loss: 0.0430 - val_accuracy: 0.9936 - val_loss: 0.0226\n","Epoch 14/20\n","591/591 - 111s - 188ms/step - accuracy: 0.9871 - loss: 0.0440 - val_accuracy: 0.9936 - val_loss: 0.0235\n","Epoch 15/20\n","591/591 - 111s - 189ms/step - accuracy: 0.9879 - loss: 0.0412 - val_accuracy: 0.9929 - val_loss: 0.0227\n","Epoch 16/20\n","591/591 - 113s - 191ms/step - accuracy: 0.9885 - loss: 0.0408 - val_accuracy: 0.9933 - val_loss: 0.0213\n","Epoch 17/20\n","591/591 - 114s - 192ms/step - accuracy: 0.9890 - loss: 0.0370 - val_accuracy: 0.9926 - val_loss: 0.0247\n","Epoch 18/20\n","591/591 - 116s - 197ms/step - accuracy: 0.9881 - loss: 0.0369 - val_accuracy: 0.9950 - val_loss: 0.0194\n","Epoch 19/20\n","591/591 - 113s - 192ms/step - accuracy: 0.9884 - loss: 0.0382 - val_accuracy: 0.9940 - val_loss: 0.0211\n","Epoch 20/20\n","591/591 - 112s - 189ms/step - accuracy: 0.9900 - loss: 0.0340 - val_accuracy: 0.9945 - val_loss: 0.0166\n","\n","Model training complete!\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1400x500 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Import necessary tools\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","# 1. Create a validation set\n","# We split the training data into a training set (90%) and a validation set (10%).\n","# The model will train on the training set and we'll check its performance on the validation set.\n","# random_state ensures we get the same split every time we run the code.\n","X_train_split, X_val, y_train_split, y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=42)\n","print(\"Data split into training and validation sets.\")\n","\n","# 2. Set up Data Augmentation\n","# This creates more training data from the existing images by applying random transformations.\n","datagen = ImageDataGenerator(\n","        rotation_range=10,      # randomly rotate images in the range (degrees, 0 to 180)\n","        zoom_range = 0.1,       # Randomly zoom image \n","        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n","        height_shift_range=0.1) # randomly shift images vertically (fraction of total height)\n","\n","datagen.fit(X_train_split)\n","print(\"Data augmentation generator is ready.\")\n","\n","# 3. Set training parameters\n","epochs = 20 # The model will see the entire dataset 20 times.\n","batch_size = 64 # The model will be updated after processing 64 images at a time.\n","\n","# 4. Train the model\n","# We use the .fit() method which starts the training process.\n","# It will use the augmented data from our 'datagen' generator.\n","# This step will take some time to complete, depending on your hardware (CPU/GPU).\n","history = model.fit(datagen.flow(X_train_split, y_train_split, batch_size=batch_size),\n","                              epochs = epochs, \n","                              validation_data = (X_val, y_val),\n","                              verbose = 2) # verbose=2 shows less output per epoch\n","\n","print(\"\\nModel training complete!\")\n","\n","# 5. Visualize the training history\n","# We can plot the accuracy and loss for both training and validation sets to see how our model learned.\n","plt.figure(figsize=(14, 5))\n","\n","# Plot Accuracy\n","plt.subplot(1, 2, 1)\n","plt.plot(history.history['accuracy'], label='Training Accuracy')\n","plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n","plt.title('Training and Validation Accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","# Plot Loss\n","plt.subplot(1, 2, 2)\n","plt.plot(history.history['loss'], label='Training Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.title('Training and Validation Loss')\n","plt.xlabel('Epoch')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","plt.show()"]},{"cell_type":"markdown","id":"9f246293","metadata":{"papermill":{"duration":0.007392,"end_time":"2025-07-15T14:46:09.121473","exception":false,"start_time":"2025-07-15T14:46:09.114081","status":"completed"},"tags":[]},"source":["# [5] Predict on Test Data and Create Submission File\n"]},{"cell_type":"code","execution_count":6,"id":"b89ea981","metadata":{"execution":{"iopub.execute_input":"2025-07-15T14:46:09.138839Z","iopub.status.busy":"2025-07-15T14:46:09.138434Z","iopub.status.idle":"2025-07-15T14:46:29.890673Z","shell.execute_reply":"2025-07-15T14:46:29.889307Z"},"papermill":{"duration":20.762371,"end_time":"2025-07-15T14:46:29.892214","exception":false,"start_time":"2025-07-15T14:46:09.129843","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[1m875/875\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 23ms/step\n","Predictions made on the test data.\n","\n","First 5 rows of the submission file:\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ImageId</th>\n","      <th>Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   ImageId  Label\n","0        1      2\n","1        2      0\n","2        3      9\n","3        4      0\n","4        5      3"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","'submission.csv' file has been created successfully!\n","You can now submit this file to the Digit Recognizer competition on Kaggle.\n"]}],"source":["# 1. Make predictions on the test data\n","# The model.predict() method will return an array of probabilities for each class (0-9) for each image.\n","predictions = model.predict(X_test)\n","\n","# 2. Convert probabilities to digit labels\n","# We use np.argmax() to find the index of the highest probability for each prediction.\n","# This index corresponds to the predicted digit.\n","predicted_labels = np.argmax(predictions, axis=1)\n","\n","print(\"Predictions made on the test data.\")\n","\n","# 3. Create the submission DataFrame\n","# The submission file needs two columns: 'ImageId' and 'Label'.\n","# 'ImageId' should start from 1, not 0.\n","submission_df = pd.DataFrame({\n","    \"ImageId\": range(1, len(predicted_labels) + 1),\n","    \"Label\": predicted_labels\n","})\n","\n","# Display the first few rows of our submission file to check it\n","print(\"\\nFirst 5 rows of the submission file:\")\n","display(submission_df.head())\n","\n","# 4. Save the DataFrame to a CSV file\n","# We use index=False because Kaggle does not want the pandas DataFrame index in the submission file.\n","submission_df.to_csv('submission.csv', index=False)\n","\n","print(\"\\n'submission.csv' file has been created successfully!\")\n","print(\"You can now submit this file to the Digit Recognizer competition on Kaggle.\")"]},{"cell_type":"code","execution_count":null,"id":"3776b923","metadata":{"papermill":{"duration":0.021795,"end_time":"2025-07-15T14:46:29.937293","exception":false,"start_time":"2025-07-15T14:46:29.915498","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":861823,"sourceId":3004,"sourceType":"competition"}],"dockerImageVersionId":31089,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":2347.254998,"end_time":"2025-07-15T14:46:33.47594","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-07-15T14:07:26.220942","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}